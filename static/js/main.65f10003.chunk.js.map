{"version":3,"sources":["components/MediaController.ts","externals/GlueCode.ts","Application.ts","components/ApplicationView.tsx","reportWebVitals.ts","index.tsx"],"names":["MediaController","audioElementId","_audioElementId","_analyserNode","_audioContext","audioElement","document","getElementById","thisObject","addEventListener","event","dispatchEvent","Event","MediaReady","mediaUrl","this","src","AudioContext","track","createMediaElementSource","createAnalyser","fftSize","connect","destination","paused","ended","play","pause","buffer","getByteFrequencyData","EventTarget","generateGlueCode","importObject","WebGL","Utilities","contextArray","textureArray","imageDataArray","programArray","shaderArray","bufferArray","frameBufferArray","renderBufferArray","uniformLocationArray","vaoArray","createContextFromCanvas","canvasId","contextType","canvasName","__getString","element","Error","canvas","contextId","context","getContext","gl","maxVertexUniform","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxFragmentUniform","MAX_FRAGMENT_UNIFORM_VECTORS","console","log","id","findIndex","length","push","getDrawingBufferWidth","ctx","drawingBufferWidth","getDrawingBufferHeight","drawingBufferHeight","enable","cap","blendFunc","sfactor","dfactor","createShader","type","shader","shaderSource","source","compileShader","compilationLog","getShaderInfoLog","createProgram","program","attachShader","linkProgram","prog","getProgramParameter","LINK_STATUS","getProgramInfoLog","paramName","message","__newString","useProgram","createBuffer","bindBuffer","target","createTexture","texture","bindTexture","texImage2D","level","internalformat","format","imageId","image","activeTexture","texParameteri","pname","param","getAttribLocation","name","attribName","enableVertexAttribArray","index","getUniformLocation","loc","uniform1f","value","location","uniform1fv","view","arrayView","__getArrayView","uniform2f","x","y","uniform1i","clear","mask","clearColor","r","g","b","a","viewport","width","height","bufferdata","data","usage","bufferData","vertexAttribPointer","indx","size","normalized","stride","offset","drawArrays","mode","first","count","drawElements","getImageData","imageName","imageData","images","patchFromLoaderApi","exportObject","Object","entries","forEach","key","startsWith","Application","_exports","_eventRegistered","_mediaController","loadMedia","_resolveFilePath","_preloadResources","namedImageData","clientWidth","clientHeight","memory","WebAssembly","Memory","initial","imports","env","fetch","response","loader","instantiateStreaming","wasmInstance","exports","initialize","onFrameRateUpdated","updateFrame","renderFrame","getFrequencyBuffer","framesRendered","startMillisecond","Date","now","requestAnimationFrame","renderFrameCore","currMillisecond","elapsed","resourceName","Promise","resolve","reject","Image","onload","createElement","drawImage","resources","onerror","toString","path","window","pathname","mainTheme","createMuiTheme","palette","useStyles","makeStyles","theme","root","display","flexDirection","spacing","padding","header","content","flexGrow","footer","alignItems","justifyContent","footerLeft","footerRight","iconButton","margin","ApplicationView","classes","applicationRef","useRef","useState","frameRate","setFrameRate","mediaReady","setMediaReady","handleFrameRateUpdated","fps","useEffect","current","application","then","result","startRenderLoop","ThemeProvider","className","Typography","variant","color","toFixed","IconButton","aria-label","href","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.65f10003.chunk.js","sourcesContent":["export class MediaController extends EventTarget {\n    public static MediaReady = \"media-ready\";\n\n    private readonly _audioElementId: string;\n\n    private _analyserNode: AnalyserNode | null = null;\n    private _audioContext: AudioContext | null = null;\n\n    constructor(audioElementId: string) {\n        super();\n\n        this._audioElementId = audioElementId;\n        const e = document.getElementById(this._audioElementId);\n        const audioElement = e as HTMLAudioElement;\n\n        const thisObject = this;\n        audioElement.addEventListener(\"canplaythrough\", (event: Event) => {\n            // Notify all listeners that the media is ready for playback.\n            thisObject.dispatchEvent(new Event(MediaController.MediaReady));\n        });\n    }\n\n    public loadMedia(mediaUrl: string): void {\n        const e = document.getElementById(this._audioElementId);\n        const audioElement = e as HTMLAudioElement;\n        audioElement.src = mediaUrl;\n        // audioElement.load();\n    }\n\n    public connect(): void {\n        if (this._audioContext) {\n            return; // Already connected.\n        }\n\n        this._audioContext = new AudioContext();\n\n        const e = document.getElementById(this._audioElementId);\n        const audioElement = e as HTMLAudioElement;\n        const track = this._audioContext.createMediaElementSource(audioElement);\n\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.fftSize = 512;\n        track.connect(this._analyserNode);\n        this._analyserNode.connect(this._audioContext.destination);\n    }\n\n    public play(): void {\n        const e = document.getElementById(this._audioElementId);\n        const audioElement = e as HTMLAudioElement;\n\n        if (audioElement.paused || audioElement.ended) {\n            audioElement.play();\n        } else {\n            audioElement.pause();\n        }\n    }\n\n    public getByteFrequencyData(buffer: Uint8Array): boolean {\n        if (!this._analyserNode) {\n            return false;\n        }\n\n        this._analyserNode.getByteFrequencyData(buffer);\n        return true;\n    }\n}\n","export interface NamedImageData {\n    [key: string]: ImageData;\n}\n\ninterface ImportObject {\n    WebGL: {\n        contextArray: WebGLRenderingContext[]; // TODO: Use WebGL2RenderingContext\n        textureArray: WebGLTexture[];\n        imageDataArray: ImageData[];\n        programArray: WebGLProgram[];\n        shaderArray: WebGLShader[];\n        bufferArray: WebGLBuffer[];\n        frameBufferArray: any[];\n        renderBufferArray: any[];\n        uniformLocationArray: WebGLUniformLocation[];\n        vaoArray: any[];\n\n        createContextFromCanvas: (canvasId: number, contextType: number) => number;\n        createShader: (ctx: number, type: number) => number;\n        shaderSource: (ctx: number, shader: number, source: number) => void;\n        compileShader: (ctx: number, shader: number) => void;\n        createProgram: (ctx: number) => number;\n        attachShader: (ctx: number, program: number, shader: number) => void;\n        linkProgram: (ctx: number, program: number) => void;\n        getProgramParameter: (ctx: number, program: number, paramName: number) => number;\n        getProgramInfoLog: (ctx: number, program: number) => number;\n        useProgram: (ctx: number, program: number) => void;\n        createBuffer: (ctx: number) => number;\n        bindBuffer: (ctx: number, target: number, buffer: number) => void;\n        getAttribLocation: (ctx: number, program: number, name: number) => number;\n        enableVertexAttribArray: (ctx: number, index: number) => void;\n        clear: (ctx: number, mask: number) => void;\n        clearColor: (ctx: number, r: number, g: number, b: number, a: number) => void;\n\n        viewport: (\n            ctx: number,\n            indx: number,\n            x: number,\n            y: number,\n            width: number,\n            height: number\n        ) => void;\n\n        vertexAttribPointer: (\n            ctx: number,\n            indx: number,\n            size: number,\n            type: number,\n            normalized: number,\n            stride: number,\n            offset: number\n        ) => void;\n\n        drawArrays: (ctx: number, mode: number, first: number, count: number) => void;\n\n        // To be patched in from loader after module's instantiated.\n        __getString: (ptr: number) => string;\n        __getArrayView: (ptr: number) => any; // Any 'TypedArray'\n\n        // Templated function definitions.\n        [key: string]: any;\n    };\n\n    Utilities: {\n        getImageData: (imageName: number) => number;\n    };\n\n    images: NamedImageData;\n\n    [key: string]: any;\n}\n\ninterface ExportObject {\n    [key: string]: any;\n}\n\nexport function generateGlueCode(importObject: ImportObject): void {\n    importObject.WebGL = importObject.WebGL || {};\n    importObject.Utilities = importObject.Utilities || {};\n\n    const WebGL = importObject.WebGL;\n    const Utilities = importObject.Utilities;\n\n    WebGL.contextArray = [];\n    WebGL.textureArray = [];\n    WebGL.imageDataArray = [];\n    WebGL.programArray = [];\n    WebGL.shaderArray = [];\n    WebGL.bufferArray = [];\n    WebGL.frameBufferArray = [];\n    WebGL.renderBufferArray = [];\n    WebGL.uniformLocationArray = [];\n    WebGL.vaoArray = [];\n\n    WebGL.createContextFromCanvas = function (canvasId: number, contextType: number): number {\n        const canvasName = WebGL.__getString(canvasId);\n        const element = document.getElementById(canvasName);\n        if (!element) throw new Error(`Invalid canvas id: ${canvasName}`);\n\n        const canvas = element as HTMLCanvasElement;\n        const contextId = WebGL.__getString(contextType);\n\n        let context = canvas.getContext(contextId);\n        if (!context && contextId === \"webgl2\") {\n            context = canvas.getContext(\"webgl\"); // Downgrade if needed.\n        }\n\n        const gl = context as WebGLRenderingContext;\n        const maxVertexUniform = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        const maxFragmentUniform = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n        console.log(`MAX_VERTEX_UNIFORM_VECTORS: ${maxVertexUniform}`);\n        console.log(`MAX_FRAGMENT_UNIFORM_VECTORS: ${maxFragmentUniform}`);\n\n        let id = WebGL.contextArray.findIndex((element) => element == null);\n\n        if (id === -1) {\n            id = WebGL.contextArray.length;\n            WebGL.contextArray.push(gl as WebGLRenderingContext);\n        } else {\n            WebGL.contextArray[id] = gl as WebGLRenderingContext;\n        }\n\n        return id;\n    };\n\n    WebGL.getDrawingBufferWidth = function (ctx: number): number {\n        return WebGL.contextArray[ctx].drawingBufferWidth;\n    };\n\n    WebGL.getDrawingBufferHeight = function (ctx: number): number {\n        return WebGL.contextArray[ctx].drawingBufferHeight;\n    };\n\n    WebGL.enable = function (ctx: number, cap: number): void {\n        WebGL.contextArray[ctx].enable(cap);\n    };\n\n    WebGL.blendFunc = function (ctx: number, sfactor: number, dfactor: number): void {\n        WebGL.contextArray[ctx].blendFunc(sfactor, dfactor);\n    };\n\n    WebGL.createShader = function (ctx: number, type: number): number {\n        let id = WebGL.shaderArray.findIndex((element) => element == null);\n        let shader = WebGL.contextArray[ctx].createShader(type);\n\n        if (id === -1) {\n            id = WebGL.shaderArray.length;\n            WebGL.shaderArray.push(shader as WebGLShader);\n        } else {\n            WebGL.shaderArray[id] = shader as WebGLShader;\n        }\n        return id;\n    };\n\n    WebGL.shaderSource = function (ctx: number, shader: number, source: number): void {\n        WebGL.contextArray[ctx].shaderSource(WebGL.shaderArray[shader], WebGL.__getString(source));\n    };\n\n    WebGL.compileShader = function (ctx: number, shader: number): void {\n        WebGL.contextArray[ctx].compileShader(WebGL.shaderArray[shader]);\n        const compilationLog = WebGL.contextArray[ctx].getShaderInfoLog(WebGL.shaderArray[shader]);\n\n        if (compilationLog && compilationLog.length > 0) {\n            console.log(`compileShader: ${compilationLog}`);\n        }\n    };\n\n    WebGL.createProgram = function (ctx: number): number {\n        let id = WebGL.programArray.findIndex((element) => element == null);\n        let program = WebGL.contextArray[ctx].createProgram();\n\n        if (id === -1) {\n            id = WebGL.programArray.length;\n            WebGL.programArray.push(program as WebGLProgram);\n        } else {\n            WebGL.programArray[id] = program as WebGLProgram;\n        }\n\n        return id;\n    };\n\n    WebGL.attachShader = function (ctx: number, program: number, shader: number): void {\n        WebGL.contextArray[ctx].attachShader(\n            WebGL.programArray[program],\n            WebGL.shaderArray[shader]\n        );\n    };\n\n    WebGL.linkProgram = function (ctx: number, program: number): void {\n        const context = WebGL.contextArray[ctx];\n        const prog = WebGL.programArray[program];\n        context.linkProgram(prog);\n\n        if (!context.getProgramParameter(prog, context.LINK_STATUS)) {\n            console.log(context.getProgramInfoLog(prog));\n        }\n    };\n\n    WebGL.getProgramParameter = function (ctx: number, program: number, paramName: number): number {\n        const context = WebGL.contextArray[ctx];\n        const prog = WebGL.programArray[program];\n        return context.getProgramParameter(prog, paramName);\n    };\n\n    WebGL.getProgramInfoLog = function (ctx: number, program: number): number {\n        const context = WebGL.contextArray[ctx];\n        const prog = WebGL.programArray[program];\n\n        const message = context.getProgramInfoLog(prog);\n        return WebGL.__newString(message);\n    };\n\n    WebGL.useProgram = function (ctx: number, program: number): void {\n        WebGL.contextArray[ctx].useProgram(WebGL.programArray[program]);\n    };\n\n    WebGL.createBuffer = function (ctx: number): number {\n        let id = WebGL.bufferArray.findIndex((element) => element == null);\n        let buffer = WebGL.contextArray[ctx].createBuffer();\n\n        if (id === -1) {\n            id = WebGL.bufferArray.length;\n            WebGL.bufferArray.push(buffer as WebGLBuffer);\n        } else {\n            WebGL.bufferArray[id] = buffer as WebGLBuffer;\n        }\n\n        return id;\n    };\n\n    WebGL.bindBuffer = function (ctx: number, target: number, buffer: number): void {\n        WebGL.contextArray[ctx].bindBuffer(target, WebGL.bufferArray[buffer]);\n    };\n\n    WebGL.createTexture = function (ctx: number): number {\n        let id = WebGL.textureArray.findIndex((element) => element == null);\n        let texture = WebGL.contextArray[ctx].createTexture();\n\n        if (id === -1) {\n            id = WebGL.textureArray.length;\n            WebGL.textureArray.push(texture as WebGLTexture);\n        } else {\n            WebGL.textureArray[id] = texture as WebGLTexture;\n        }\n\n        return id;\n    };\n\n    WebGL.bindTexture = function (ctx: number, target: number, texture: number): void {\n        const context = WebGL.contextArray[ctx];\n        context.bindTexture(target, WebGL.textureArray[texture]);\n    };\n\n    WebGL.texImage2D = function (\n        ctx: number,\n        target: number,\n        level: number,\n        internalformat: number,\n        format: number,\n        type: number,\n        imageId: number\n    ): void {\n        const context = WebGL.contextArray[ctx];\n        const image = WebGL.imageDataArray[imageId];\n        context.texImage2D(target, level, internalformat, format, type, image);\n    };\n\n    WebGL.activeTexture = function (ctx: number, texture: number): void {\n        WebGL.contextArray[ctx].activeTexture(texture);\n    };\n\n    WebGL.texParameteri = function (\n        ctx: number,\n        target: number,\n        pname: number,\n        param: number\n    ): void {\n        const context = WebGL.contextArray[ctx];\n        context.texParameteri(target, pname, param);\n    };\n\n    WebGL.getAttribLocation = function (ctx: number, program: number, name: number): number {\n        const attribName = WebGL.__getString(name);\n        const prog = WebGL.programArray[program];\n        const loc = WebGL.contextArray[ctx].getAttribLocation(prog, attribName);\n        return loc;\n    };\n\n    WebGL.enableVertexAttribArray = function (ctx: number, index: number): void {\n        WebGL.contextArray[ctx].enableVertexAttribArray(index);\n    };\n\n    WebGL.getUniformLocation = function (ctx: number, program: number, name: number): number {\n        const context = WebGL.contextArray[ctx];\n        const prog = WebGL.programArray[program];\n\n        let id = WebGL.uniformLocationArray.findIndex((element) => element == null);\n        let loc = context.getUniformLocation(prog, WebGL.__getString(name));\n\n        if (id === -1) {\n            id = WebGL.uniformLocationArray.length;\n            WebGL.uniformLocationArray.push(loc as WebGLUniformLocation);\n        } else {\n            WebGL.uniformLocationArray[id] = loc as WebGLUniformLocation;\n        }\n\n        return id;\n    };\n\n    WebGL.uniform1f = function (ctx: number, loc: number, value: number): void {\n        const location = WebGL.uniformLocationArray[loc];\n        WebGL.contextArray[ctx].uniform1f(location, value);\n    };\n\n    WebGL.uniform1fv = function (ctx: number, loc: number, view: number): void {\n        const location = WebGL.uniformLocationArray[loc];\n        const arrayView = WebGL.__getArrayView(view);\n        WebGL.contextArray[ctx].uniform1fv(location, arrayView);\n    };\n\n    WebGL.uniform2f = function (ctx: number, loc: number, x: number, y: number): void {\n        const location = WebGL.uniformLocationArray[loc];\n        WebGL.contextArray[ctx].uniform2f(location, x, y);\n    };\n\n    WebGL.uniform1i = function (ctx: number, loc: number, value: number): void {\n        const location = WebGL.uniformLocationArray[loc];\n        WebGL.contextArray[ctx].uniform1i(location, value);\n    };\n\n    // Clears the color, depth and stencil buffers\n    WebGL.clear = function (ctx: number, mask: number): void {\n        WebGL.contextArray[ctx].clear(mask);\n    };\n\n    // Specify the color fill a cleared color buffer with\n    WebGL.clearColor = function (ctx: number, r: number, g: number, b: number, a: number): void {\n        WebGL.contextArray[ctx].clearColor(r, g, b, a);\n    };\n\n    WebGL.viewport = function (\n        ctx: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): void {\n        WebGL.contextArray[ctx].viewport(x, y, width, height);\n    };\n\n    const bufferdata = function (ctx: number, target: number, data: number, usage: number): void {\n        WebGL.contextArray[ctx].bufferData(target, WebGL.__getArrayView(data), usage);\n    };\n\n    WebGL[\"bufferData<f32>\"] = bufferdata;\n    WebGL[\"bufferData<f64>\"] = bufferdata;\n    WebGL[\"bufferData<i32>\"] = bufferdata;\n    WebGL[\"bufferData<u16>\"] = bufferdata;\n\n    WebGL.vertexAttribPointer = function (\n        ctx: number,\n        indx: number,\n        size: number,\n        type: number,\n        normalized: number,\n        stride: number,\n        offset: number\n    ): void {\n        WebGL.contextArray[ctx].vertexAttribPointer(indx, size, type, !!normalized, stride, offset);\n    };\n\n    WebGL.drawArrays = function (ctx: number, mode: number, first: number, count: number): void {\n        WebGL.contextArray[ctx].drawArrays(mode, first, count);\n    };\n\n    importObject.WebGL.drawElements = function (\n        ctx: number,\n        mode: number,\n        count: number,\n        type: number,\n        offset: number\n    ): void {\n        WebGL.contextArray[ctx].drawElements(mode, count, type, offset);\n    };\n\n    Utilities.getImageData = function (imageName: number): number {\n        const name = WebGL.__getString(imageName);\n        const imageData = importObject.images[name];\n\n        const id = WebGL.imageDataArray.length;\n        WebGL.imageDataArray.push(imageData);\n        return id;\n    };\n}\n\nexport function patchFromLoaderApi(importObject: ImportObject, exportObject: ExportObject): void {\n    Object.entries(exportObject).forEach(([key, value]) => {\n        if (key.startsWith(\"__\") && typeof value === \"function\") {\n            importObject.WebGL[key] = value;\n        }\n    });\n}\n","import loader from \"@assemblyscript/loader\";\nimport { MediaController } from \"./components/MediaController\";\nimport { generateGlueCode, NamedImageData, patchFromLoaderApi } from \"./externals/GlueCode\";\n\ninterface OnFrameRateUpdatedFunc {\n    (fps: number): void;\n}\n\nexport class Application extends EventTarget {\n    public static MediaReady = \"media-ready\";\n\n    private _exports: any = null;\n    private _eventRegistered: boolean = false;\n    private _mediaController: MediaController | null = null;\n\n    public async initialize(): Promise<boolean> {\n        if (this._exports) {\n            throw new Error(\"Application.initialize is called twice\");\n        }\n\n        this._mediaController = new MediaController(\"audio-source\");\n        this._mediaController.loadMedia(this._resolveFilePath(\"Bajan-Canadian.mp3\"));\n        this._mediaController.addEventListener(MediaController.MediaReady, () => {\n            if (!this._eventRegistered) {\n                this._eventRegistered = true;\n\n                document.addEventListener(\"click\", () => {\n                    if (this._mediaController) {\n                        this._mediaController.connect();\n                        this._mediaController.play();\n                    }\n                });\n            }\n\n            this.dispatchEvent(new Event(Application.MediaReady));\n        });\n\n        // A little shortcut\n        const namedImageData = await this._preloadResources(\"circle.png\");\n\n        const canvas = document.getElementById(\"canvas-3d\") as HTMLCanvasElement;\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        const memory = new WebAssembly.Memory({ initial: 100 }); // linear memory\n\n        const imports: { [key: string]: any } = {\n            env: {\n                memory: memory,\n            },\n            images: namedImageData,\n        };\n\n        generateGlueCode(imports as any);\n\n        const response = await fetch(this._resolveFilePath(\"renderer.wasm\"));\n        const wasmInstance = await loader.instantiateStreaming(response, imports);\n        this._exports = wasmInstance.exports;\n\n        patchFromLoaderApi(imports as any, this._exports);\n        const { __newString } = this._exports;\n\n        const canvasId = __newString(\"canvas-3d\");\n        const contextType = __newString(\"webgl2\");\n        this._exports.initialize(canvasId, contextType);\n        return true;\n    }\n\n    public startRenderLoop(onFrameRateUpdated: OnFrameRateUpdatedFunc): void {\n        const { updateFrame, renderFrame, getFrequencyBuffer, __getArrayView } = this._exports;\n\n        // These remains the same, keep out of loop to avoid JS-WASM transitions.\n        const bufferId = getFrequencyBuffer();\n        const buffer = __getArrayView(bufferId) as Uint8Array;\n\n        let framesRendered = 0.0;\n        let startMillisecond = Date.now();\n\n        const thisObject = this;\n        function renderFrameCore(): void {\n            if (thisObject._mediaController) {\n                if (thisObject._mediaController.getByteFrequencyData(buffer)) {\n                    updateFrame();\n                }\n            }\n\n            framesRendered++;\n            const currMillisecond = Date.now();\n            const elapsed = currMillisecond - startMillisecond;\n            if (elapsed >= 1000) {\n                startMillisecond = currMillisecond;\n\n                onFrameRateUpdated((1000.0 * framesRendered) / elapsed);\n                framesRendered = 0;\n            }\n\n            renderFrame();\n            requestAnimationFrame(renderFrameCore);\n        }\n\n        requestAnimationFrame(renderFrameCore);\n    }\n\n    private async _preloadResources(resourceName: string): Promise<NamedImageData> {\n        return new Promise<NamedImageData>((resolve, reject) => {\n            const image = new Image();\n\n            image.onload = function (event: Event) {\n                const canvas = document.createElement(\"canvas\");\n                const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n                context.drawImage(image, 0, 0);\n\n                const data = context.getImageData(0, 0, image.width, image.height);\n\n                const resources: NamedImageData = {};\n                resources[resourceName] = data;\n                resolve(resources);\n            };\n\n            image.onerror = function (event: Event | string) {\n                reject(event ? event.toString() : \"\");\n            };\n\n            image.src = this._resolveFilePath(resourceName);\n        });\n    }\n\n    private _resolveFilePath(path: string): string {\n        return `${window.location.pathname}/${path}`;\n    }\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Application } from \"../Application\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\n\nimport { makeStyles, createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst mainTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n    },\n});\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: `calc(100% - ${theme.spacing(4)}px)`,\n        padding: `${theme.spacing(2)}px`,\n    },\n    header: {},\n    content: {\n        flexGrow: 1,\n    },\n    footer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-end\",\n        justifyContent: \"space-between\",\n    },\n    footerLeft: {},\n    footerRight: {},\n    iconButton: {\n        margin: `0px`,\n        padding: `0px`,\n    },\n}));\n\nfunction ApplicationView() {\n    const classes = useStyles();\n    const applicationRef = useRef<Application>();\n    const [frameRate, setFrameRate] = useState<number>(0);\n    const [mediaReady, setMediaReady] = useState<boolean>(false);\n\n    function handleFrameRateUpdated(fps: number): void {\n        setFrameRate(fps);\n    }\n\n    useEffect(() => {\n        if (!applicationRef.current) {\n            const application = new Application();\n            applicationRef.current = application;\n\n            application.addEventListener(Application.MediaReady, () => {\n                setMediaReady(true);\n            });\n\n            application.initialize().then((result: boolean) => {\n                if (result) {\n                    application.startRenderLoop(handleFrameRateUpdated);\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <ThemeProvider theme={mainTheme}>\n            <div className={classes.root}>\n                <div className={classes.header}>\n                    <Typography variant=\"body2\" color=\"textPrimary\">\n                        {mediaReady ? `Fps: ${frameRate.toFixed(2)}` : \"Media Not Ready\"}\n                    </Typography>\n                </div>\n                <div className={classes.content}></div>\n                <div className={classes.footer}>\n                    <div className={classes.footerLeft}>\n                        <Typography variant=\"body2\" color=\"textPrimary\">\n                            {mediaReady ? \"Click to play 'Bajan Canadian (Minecraft Mix)'\" : \"\"}\n                        </Typography>\n                    </div>\n                    <div className={classes.footerRight}>\n                        <IconButton\n                            aria-label=\"delete\"\n                            className={classes.iconButton}\n                            target=\"_blank\"\n                            href=\"https://github.com/benglin/project-glitter\"\n                        >\n                            <GitHubIcon color=\"secondary\" fontSize=\"large\" />\n                        </IconButton>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default ApplicationView;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ApplicationView from \"./components/ApplicationView\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApplicationView />\n    </React.StrictMode>,\n    document.getElementById(\"application-view-root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}